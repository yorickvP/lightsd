// Generated by LiveScript 1.2.0
(function(){
  var airport, lock, MicroDB, spawn, settings, sun_sched, version, spit, cbify, air, turnLock, turn, lightsDb, listLights, delLight, delLightByName, addLight, turnLight, scheduleDb, listSchedule, delSchedule, addSchedule, addScheduleLight, addScheduleSched, scheduleRun, scheduleNext, scheduleTimeout, execSchedule, slice$ = [].slice;
  airport = require('airport');
  lock = require('./lock');
  MicroDB = require('nodejs-microdb');
  spawn = require('child_process').spawn;
  settings = require('./config');
  sun_sched = require('./sun_sched');
  version = require(__dirname + "/../package.json").version;
  spit = function(it){
    return process.stdout.write((new Date).toISOString() + (": " + it + "\n"));
  };
  cbify = function(f){
    return function(){
      var i$, args, cb, ret;
      if (arguments.length === f.length + 1) {
        args = 0 < (i$ = arguments.length - 1) ? slice$.call(arguments, 0, i$) : (i$ = 0, []), cb = arguments[i$];
        ret = f.apply(this, arguments);
        return typeof cb === 'function' ? cb(ret) : void 8;
      } else {
        return f.apply(this, arguments);
      }
    };
  };
  air = airport(settings.host, settings.port);
  air(function(remote, conn){
    this.turn = cbify(turn);
    this.lights = {
      list: cbify(listLights),
      del: cbify(delLight),
      delName: cbify(delLightByName),
      add: cbify(addLight),
      turn: cbify(turnLight)
    };
    this.schedule = {
      list: cbify(listSchedule),
      del: cbify(delSchedule),
      add: cbify(addSchedule),
      addLight: cbify(addScheduleLight)
    };
  }).listen('lightsd@' + version);
  turnLock = new lock;
  turn = function(group, num, state){
    if (typeof state === 'boolean') {
      state = state ? 'on' : 'off';
    }
    turnLock.get(function(){
      var proc;
      spit("light " + state + " " + group + " " + num);
      proc = spawn(settings.controller, [group, num, state]);
      proc.stdout.pipe(process.stdout);
      return proc.on('exit', bind$(turnLock, 'free'));
    });
  };
  lightsDb = new MicroDB({
    file: 'lights.db'
  });
  listLights = function(){
    return lightsDb.data;
  };
  delLight = bind$(lightsDb, 'del');
  delLightByName = function(name){
    return lightsDb.del(lightsDb.find('name', name));
  };
  addLight = function(name, group, num){
    return lightsDb.add({
      name: name,
      group: group,
      num: num
    });
  };
  turnLight = function(name, state){
    var id, ref$, group, num;
    id = lightsDb.find('name', name);
    if (!id) {
      return false;
    } else {
      ref$ = lightsDb.data[id], group = ref$.group, num = ref$.num;
      turn(group, num, state);
      return true;
    }
  };
  scheduleDb = new MicroDB({
    file: 'schedule.db'
  });
  listSchedule = function(){
    return scheduleDb.data;
  };
  delSchedule = function(it){
    scheduleDb.del(it);
    spit("sched  DEL - " + it);
    return execSchedule();
  };
  addSchedule = function(time, group, num, state, desc){
    time = +time;
    desc == null && (desc = '');
    scheduleDb.add({
      time: time,
      group: group,
      num: num,
      state: state,
      desc: desc
    });
    spit("sched  ADD - " + time + " " + group + " " + num + " " + state + " " + desc);
    return execSchedule();
  };
  addScheduleLight = function(time, name, state, desc){
    time = +time;
    desc == null && (desc = '');
    scheduleDb.add({
      time: time,
      name: name,
      state: state,
      desc: desc
    });
    spit("sched  ADD - " + time + " " + name + " " + state + " " + desc);
    return execSchedule();
  };
  addScheduleSched = function(time, desc){
    time = +time;
    desc == null && (desc = '');
    scheduleDb.add({
      time: time,
      scheduleDate: time,
      desc: desc
    });
    spit("sched  ADD - " + time + " sched " + desc);
    return execSchedule();
  };
  scheduleRun = function(s){
    if (s.name != null) {
      return turnLight(s.name, s.state);
    } else if (s.scheduleDate != null) {
      return sun_sched.scheduleRun({
        addLight: addScheduleLight,
        addSched: addScheduleSched,
        list: listSchedule,
        del: delSchedule
      }, s);
    } else {
      return turn(s.group, s.num, s.state);
    }
  };
  scheduleNext = function(){
    var minS, minId, id, ref$, s;
    minS = void 8;
    minId = void 8;
    for (id in ref$ = scheduleDb.data) {
      s = ref$[id];
      if (minS == null || minS.time > s.time) {
        minS = s;
        minId = id;
      }
    }
    return [minId, minS];
  };
  scheduleTimeout = void 8;
  execSchedule = function(){
    var scheduleTimeout, ref$, id, s, now;
    if (scheduleTimeout != null) {
      clearTimeout(scheduleTimeout);
      scheduleTimeout = void 8;
    }
    ref$ = scheduleNext(), id = ref$[0], s = ref$[1];
    if (s == null) {
      spit("sched  EMPTY");
      return;
    }
    now = Date.now();
    if (s.time < now) {
      spit("sched  EXEC - " + s.time + " " + s.desc);
      process.nextTick(function(){
        return scheduleRun(s);
      });
      scheduleDb.del(id);
      return execSchedule();
    } else {
      spit("sched  DEFER - " + s.time);
      return scheduleTimeout = setTimeout(execSchedule, s.time - now + 100);
    }
  };
  process.on('SIGINT', function(){
    lightsDb.flush();
    scheduleDb.flush();
    process.exit();
  });
  execSchedule();
  sun_sched.scheduleFuture({
    addSched: addScheduleSched,
    list: listSchedule,
    del: delSchedule
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
