// Generated by LiveScript 1.2.0
(function(){
  var suncalc, timesForDay, e, addSched, remSched, scheduleRun, dateRepr, scheduleFuture, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  suncalc = require('suncalc');
  timesForDay = (function(){
    try {
      return require('../sun_sched.js');
    } catch (e$) {
      e = e$;
      switch (e.code) {
      case 'MODULE_NOT_FOUND':
        return function(){
          return [];
        };
      default:
        throw e;
      }
    }
  }());
  addSched = function(arg$, schedules){
    var addLight;
    addLight = arg$.addLight;
    return schedules.forEach(function(arg$){
      var name, state, desc, time;
      name = arg$[0], state = arg$[1], desc = arg$[2], time = arg$[3];
      addLight(+time, name, state, desc);
      return console.log(name, state, desc, time);
    });
  };
  remSched = function(arg$, schedules, cb){
    var list, del, descs, scheds, id, desc, results$ = [];
    list = arg$.list, del = arg$.del;
    descs = schedules.map(function(it){
      return it[2];
    });
    scheds = list();
    for (id in scheds) {
      desc = scheds[id].desc;
      if (in$(desc, descs)) {
        results$.push(del(id));
      }
    }
    return results$;
  };
  out$.scheduleRun = scheduleRun = function(schedControl, arg$){
    var date, desc, scheds;
    date = arg$.time, desc = arg$.desc;
    date = new Date(date);
    date.setHours(12, 0, 0);
    scheds = timesForDay(date, partialize$.apply(suncalc, [suncalc.getTimes, [date, void 8, void 8], [1, 2]]));
    remSched(schedControl, scheds);
    addSched(schedControl, scheds);
    return scheduleFuture(schedControl);
  };
  dateRepr = function(d){
    return [d.getFullYear(), d.getMonth(), d.getDate()].join('-');
  };
  out$.scheduleFuture = scheduleFuture = function(arg$){
    var list, addSched, del, date, repr, scheds, id, desc;
    list = arg$.list, addSched = arg$.addSched, del = arg$.del;
    date = new Date;
    date.setHours(0, 1, 15, 10);
    date.setDate(date.getDate() + 1);
    if (date < Date.now()) {
      console.warn("trying to trigger a schedule renewal in the past");
      return;
    }
    repr = 'future ' + dateRepr(date);
    scheds = list();
    for (id in scheds) {
      desc = scheds[id].desc;
      if (desc === repr) {
        del(id);
      }
    }
    return addSched(date, repr);
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
}).call(this);
